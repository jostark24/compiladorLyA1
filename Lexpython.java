/* Lexpython.java */
/* Generated By:JavaCC: Do not edit this line. Lexpython.java */
class Lexpython implements LexpythonConstants {
        static java.util.ArrayList<String> errorL = new java.util.ArrayList<String>();
   public static void main(String[]args) throws ParseException{
        Lexpython analizador = new Lexpython(System.in);
        boolean analizar = true;
        int alertas=0;

        //Maestra este codigo del ciclo while se comento para que no salieran los pares ordenados
        do{
           analizar = analizador.Programa();

        }while(analizar);


    }

//Funcion que se llama en el main para ejecutar con los tokens creados el analizador
  static final public 
boolean Programa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case IF:
    case ELSE:
    case WHILE:
    case FOR:
    case RETURN:
    case LEER:
    case IMPRIMIR:
    case LI:
    case LD:
    case PI:
    case PD:
    case PC:
    case DP:
    case C:
    case A:
    case SUMA:
    case RESTA:
    case MULTI:
    case DIV:
    case MOD:
    case INCREMENTO:
    case DECREMENTO:
    case MAYOR:
    case MENOR:
    case IGUALDAD:
    case IGUAL:
    case AND:
    case OR:
    case NOT:
    case IDENTIFICADOR:
    case NUMERO_ENTERO:
    case NUMERO_REAL:
    case CADENA:
    case PARENL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        break;
        }
      case ELSE:{
        jj_consume_token(ELSE);
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        break;
        }
      case LEER:{
        jj_consume_token(LEER);
        break;
        }
      case IMPRIMIR:{
        jj_consume_token(IMPRIMIR);
        break;
        }
      case LI:{
        jj_consume_token(LI);
        break;
        }
      case LD:{
        jj_consume_token(LD);
        break;
        }
      case PI:{
        jj_consume_token(PI);
        break;
        }
      case PC:{
        jj_consume_token(PC);
        break;
        }
      case C:{
        jj_consume_token(C);
        break;
        }
      case A:{
        jj_consume_token(A);
        break;
        }
      case DP:{
        jj_consume_token(DP);
        break;
        }
      case PARENL:{
        jj_consume_token(PARENL);
        break;
        }
      case PD:{
        jj_consume_token(PD);
        break;
        }
      case SUMA:{
        jj_consume_token(SUMA);
        break;
        }
      case RESTA:{
        jj_consume_token(RESTA);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      case INCREMENTO:{
        jj_consume_token(INCREMENTO);
        break;
        }
      case DECREMENTO:{
        jj_consume_token(DECREMENTO);
        break;
        }
      case MAYOR:{
        jj_consume_token(MAYOR);
        break;
        }
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case IGUALDAD:{
        jj_consume_token(IGUALDAD);
        break;
        }
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case NUMERO_ENTERO:{
        jj_consume_token(NUMERO_ENTERO);
        break;
        }
      case NUMERO_REAL:{
        jj_consume_token(NUMERO_REAL);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return true;}
      break;
      }
    case ERROR:{
      jj_consume_token(ERROR);
errorL.add("Se ha encontrado el error lexico: \u005c""+ token +"\u005c" en la linea " + token.beginLine + " en las columnas [" + token.beginColumn + " a la "+ token.endColumn+"]. VERIFIQUE SU CODIGO.");

                {if ("" != null) return true;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LexpythonTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xffffffff,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf8,0x10f8,};
   }

  /** Constructor with InputStream. */
  public Lexpython(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexpython(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexpythonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexpython(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexpythonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexpython(LexpythonTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexpythonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
